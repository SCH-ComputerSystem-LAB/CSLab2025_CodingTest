"""
Baekjoon #1009 분산처리
- 알고리즘: 수학/구현

- 문제
재용이는 최신 컴퓨터 10대를 가지고 있다. 어느 날 재용이는 많은 데이터를 처리해야 될 일이 생겨서 각 컴퓨터에 1번부터 10번까지의 번호를 부여하고, 10대의 컴퓨터가 다음과 같은 방법으로 데이터들을 처리하기로 하였다.

1번 데이터는 1번 컴퓨터, 2번 데이터는 2번 컴퓨터, 3번 데이터는 3번 컴퓨터, ... ,
10번 데이터는 10번 컴퓨터, 11번 데이터는 1번 컴퓨터, 12번 데이터는 2번 컴퓨터, ...

총 데이터의 개수는 항상 ab개의 형태로 주어진다. 재용이는 문득 마지막 데이터가 처리될 컴퓨터의 번호가 궁금해졌다. 이를 수행해주는 프로그램을 작성하라.

- 입력
입력의 첫 줄에는 테스트 케이스의 개수 T가 주어진다. 그 다음 줄부터 각각의 테스트 케이스에 대해 정수 a와 b가 주어진다. (1 ≤ a < 100, 1 ≤ b < 1,000,000)
5
1 6
3 7
6 2
7 100
9 635

- 출력
각 테스트 케이스에 대해 마지막 데이터가 처리되는 컴퓨터의 번호를 출력한다.
1
7
6
1
9

- 오답노트
    - 모듈러 분배 법칙 => (a * b) % m = ((a % m) * (b % m) % m)
        - 뺄셈이랑 덧셈에도 적용됨
        - 모듈러 분배 법칙 응용 => 거듭제곱의 나머지를 구할 땐 거듭제곱의 지수를 2진수로 변환한 뒤 분해하는 식으로 곱하게 할 수 있음
    - format(value, '타입') => 타입에는 #b, #o, #x, b, o, x 등이 들어감 (순서대로 2진수/8진수/16진수 변환)
        - 10진수 변환은 그냥 int()하면 됨
    - list의 reverse() 메서드는 리스트 내용을 뒤집어서 반환해주는 게 아니고 그냥 뒤집는 거라 따로 실행해줘야함,,,
    - 컴퓨터 번호가 0~9가 아니라 1~10이니까 나머지 연산을 해서 0이 되는 경우는 10으로 바꿔 출력하는 처리를 했어야 함!
"""

t = int(input()) # 테스트 케이스의 개수 입력

for _ in range(t):
    a, b = map(int, input().split())
    binary = list(str(format(b, 'b'))) # 모듈러 거듭제곱 분배법칙 위해 지수를 2진수 변환
    binary.reverse() # 작은 순서대로 연산하기 위해 reverse()
    apow = a % 10 # a의 나머지 값(지수가 2**1일때)
    result = 1 # 결과 저장
    for i in binary:
        if i == '1': result *= apow # 2진수의 해당 자리수가 1이면 apow의 값 결과에 곱
        apow = (apow*apow)%10 # 분배법칙 진행을 위해 apow의 지수의 지수 값 증가하고 모듈러 연산
        result = result%10 # result 값 모듈러 연산(최종 출력하기 위해)
    if result == 0: print(10) # 컴퓨터 번호가 1~10이니 10에서 모듈러 돼서 0으로 바뀌었을 때 처리
    else: print(result)